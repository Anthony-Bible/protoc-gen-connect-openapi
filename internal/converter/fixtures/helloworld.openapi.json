{
  "openapi": "3.1.0",
  "info": {
    "title": "helloworld",
    "description": "",
    "version": ""
  },
  "paths": {
    "/helloworld.Greeter/SayHello": {
      "parameters": [
        {
          "$ref": "#/components/parameters/helloworld.Greeter.SayHello.helloworld.HelloRequest"
        },
        {
          "$ref": "#/components/parameters/encoding"
        },
        {
          "$ref": "#/components/parameters/base64"
        },
        {
          "$ref": "#/components/parameters/compression"
        },
        {
          "$ref": "#/components/parameters/connect"
        }
      ],
      "get": {
        "tags": [
          "helloworld.Greeter"
        ],
        "description": "Sends a greeting",
        "responses": {
          "default": {
            "$ref": "#/components/responses/connect.error"
          },
          "200": {
            "$ref": "#/components/responses/helloworld.Greeter.SayHello.helloworld.HelloReply"
          }
        }
      }
    },
    "/helloworld.Greeter/WriteHello": {
      "post": {
        "tags": [
          "helloworld.Greeter"
        ],
        "description": "Writes a greeting (has side effects)",
        "requestBody": {
          "$ref": "#/components/requestBodies/helloworld.Greeter.WriteHello.helloworld.HelloRequest"
        },
        "responses": {
          "default": {
            "$ref": "#/components/responses/connect.error"
          },
          "200": {
            "$ref": "#/components/responses/helloworld.Greeter.WriteHello.helloworld.HelloReply"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "base64": {
        "description": "Specifies if the message query param is base64 encoded, which may be required for binary data",
        "title": "base64",
        "type": "boolean"
      },
      "compression": {
        "description": "Which compression algorithm to use for this request",
        "enum": [
          "identity",
          "gzip",
          "br",
          "zstd"
        ],
        "title": "compression"
      },
      "connect": {
        "description": "Which version of connect to use.",
        "enum": [
          "1"
        ],
        "title": "connect"
      },
      "connect.error": {
        "additionalProperties": false,
        "description": "Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation",
        "properties": {
          "code": {
            "examples": [
              "CodeNotFound"
            ],
            "enum": [
              "CodeCanceled",
              "CodeUnknown",
              "CodeInvalidArgument",
              "CodeDeadlineExceeded",
              "CodeNotFound",
              "CodeAlreadyExists",
              "CodePermissionDenied",
              "CodeResourceExhausted",
              "CodeFailedPrecondition",
              "CodeAborted",
              "CodeOutOfRange",
              "CodeInternal",
              "CodeUnavailable",
              "CodeDataLoss",
              "CodeUnauthenticated"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "title": "Connect Error",
        "type": "object"
      },
      "encoding": {
        "description": "Define which encoding or 'Message-Codec' to use",
        "enum": [
          "proto",
          "json"
        ],
        "title": "encoding"
      },
      "helloworld.HelloReply": {
        "additionalProperties": false,
        "description": "The response message containing the greetings",
        "properties": {
          "message": {
            "additionalProperties": false,
            "description": "",
            "title": "message",
            "type": "string"
          }
        },
        "title": "HelloReply",
        "type": "object"
      },
      "helloworld.HelloRequest": {
        "additionalProperties": false,
        "description": "The request message containing the user's name.",
        "properties": {
          "name": {
            "additionalProperties": false,
            "description": "",
            "title": "name",
            "type": "string"
          }
        },
        "title": "HelloRequest",
        "type": "object"
      }
    },
    "responses": {
      "connect.error": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/connect.error"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/connect.error"
            }
          }
        }
      },
      "helloworld.Greeter.SayHello.helloworld.HelloReply": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloReply"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloReply"
            }
          }
        }
      },
      "helloworld.Greeter.WriteHello.helloworld.HelloReply": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloReply"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloReply"
            }
          }
        }
      }
    },
    "parameters": {
      "base64": {
        "name": "base64",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/base64"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/base64"
            }
          }
        }
      },
      "compression": {
        "name": "compression",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/compression"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/compression"
            }
          }
        }
      },
      "connect": {
        "name": "connect",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/connect"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/connect"
            }
          }
        }
      },
      "encoding": {
        "name": "encoding",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/encoding"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/encoding"
            }
          }
        }
      },
      "helloworld.Greeter.SayHello.helloworld.HelloRequest": {
        "name": "message",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloRequest"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloRequest"
            }
          }
        }
      }
    },
    "requestBodies": {
      "helloworld.Greeter.WriteHello.helloworld.HelloRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloRequest"
            }
          },
          "application/proto": {
            "schema": {
              "$ref": "#/components/schemas/helloworld.HelloRequest"
            }
          }
        },
        "required": true
      }
    }
  },
  "tags": [
    {
      "name": "helloworld.Greeter",
      "description": "The greeting service definition."
    }
  ]
}